"""
Django settings for images_resizer project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
import boto3
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Helper to get environment variables
def get_env_variable(var_name, default=None, required=False):
    try:
        return os.environ[var_name]
    except KeyError:
        if required:
            raise ImproperlyConfigured(f"Set the {var_name} environment variable")
        return default

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_variable('SECRET_KEY', default='django-insecure-very-secret-key-for-dev', required=False)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_variable('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = get_env_variable('ALLOWED_HOSTS', 'localhost,127.0.0.1,[::1]').split(',')


# Security settings for production
if not DEBUG:
    SECURE_HSTS_SECONDS = int(get_env_variable('SECURE_HSTS_SECONDS', '31536000'))  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
else:
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'image_processor',
    'crispy_forms',
    'crispy_bootstrap5',
    'cloudinary',
    'cloudinary_storage',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'image_processor.middleware.DatabaseConnectionMiddleware',
]

ROOT_URLCONF = 'images_resizer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'images_resizer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Get database URL from environment variable
DATABASE_URL = get_env_variable('DATABASE_URL', default=None)

if DATABASE_URL:
    # Parse the database URL and add Supabase-specific configurations
    import dj_database_url
    db_config = dj_database_url.parse(DATABASE_URL)
    
    # Add Supabase-specific configurations for Vercel
    db_config.update({
        'OPTIONS': {
            'sslmode': 'require',  # Force SSL connection
            'connect_timeout': 10,  # Connection timeout
            'application_name': 'images_resizer',  # Application name for monitoring
            'client_encoding': 'UTF8',
            'options': '-c timezone=utc',
        },
        'CONN_MAX_AGE': 60,  # Connection pooling - keep connections alive for 60 seconds
        'CONN_HEALTH_CHECKS': True,  # Enable connection health checks
        'ATOMIC_REQUESTS': False,  # Disable atomic requests for better performance
        'AUTOCOMMIT': True,  # Enable autocommit
    })
    
    # Force IPv4 connection if IPv6 fails
    if 'HOST' in db_config:
        # Try to resolve host to IPv4 if possible
        try:
            import socket
            host = db_config['HOST']
            # Try to get IPv4 address
            ipv4_address = socket.gethostbyname(host)
            db_config['HOST'] = ipv4_address
        except (socket.gaierror, socket.herror):
            # If resolution fails, keep original host
            pass
    
    DATABASES = {
        'default': db_config
    }
else:
    # Fallback to SQLite for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Cloudinary Media Storage Configuration
CLOUDINARY_CLOUD_NAME = get_env_variable('CLOUDINARY_CLOUD_NAME')
CLOUDINARY_API_KEY = get_env_variable('CLOUDINARY_API_KEY')
CLOUDINARY_API_SECRET = get_env_variable('CLOUDINARY_API_SECRET')

# Debug: Print Cloudinary configuration
print(f"DEBUG: CLOUDINARY_CLOUD_NAME = {CLOUDINARY_CLOUD_NAME}")
print(f"DEBUG: CLOUDINARY_API_KEY = {CLOUDINARY_API_KEY[:5] if CLOUDINARY_API_KEY else 'NOT SET'}...")
print(f"DEBUG: CLOUDINARY_API_SECRET = {CLOUDINARY_API_SECRET[:5] if CLOUDINARY_API_SECRET else 'NOT SET'}...")

# Configure media storage based on environment
if CLOUDINARY_CLOUD_NAME and CLOUDINARY_API_KEY and CLOUDINARY_API_SECRET:
    print("DEBUG: Using Cloudinary storage")
    # Use Cloudinary for media storage (production/Vercel)
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': CLOUDINARY_CLOUD_NAME,
        'API_KEY': CLOUDINARY_API_KEY,
        'API_SECRET': CLOUDINARY_API_SECRET,
    }
    # Set media URL to Cloudinary
    MEDIA_URL = f'https://res.cloudinary.com/{CLOUDINARY_CLOUD_NAME}/image/upload/'
    # Don't set MEDIA_ROOT when using Cloudinary
    # This prevents Django from trying to create local directories
    MEDIA_ROOT = None
    
    # Force all file fields to use Cloudinary
    CLOUDINARY_STORAGE.update({
        'STATICFILES_STORAGE': 'cloudinary_storage.storage.StaticHashedCloudinaryStorage',
        'STATIC_IMAGES_EXTENSIONS': ['jpg', 'jpe', 'jpeg', 'jpc', 'jp2', 'j2k', 'wdp', 'jxr', 'hdp', 'png', 'gif', 'webp', 'bmp', 'tif', 'tiff', 'ico'],
        'MAGIC_FILE_PATH': 'magic',
    })
    
    # Debug: Verify Cloudinary configuration
    print(f"DEBUG: CLOUDINARY_STORAGE config: {CLOUDINARY_STORAGE}")
    print(f"DEBUG: DEFAULT_FILE_STORAGE: {DEFAULT_FILE_STORAGE}")
    print(f"DEBUG: MEDIA_ROOT: {MEDIA_ROOT}")
    
    # Import and verify Cloudinary storage
    try:
        from cloudinary_storage.storage import MediaCloudinaryStorage
        print(f"DEBUG: Cloudinary storage imported successfully")
    except ImportError as e:
        print(f"DEBUG: Error importing Cloudinary storage: {e}")
        raise
else:
    print("DEBUG: Using local storage")
    # Use local media storage (development only)
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

# Additional settings to prevent local directory creation
if CLOUDINARY_CLOUD_NAME and CLOUDINARY_API_KEY and CLOUDINARY_API_SECRET:
    # Force all file operations to use Cloudinary
    FILE_UPLOAD_TEMP_DIR = None  # Don't use temporary directory
    FILE_UPLOAD_PERMISSIONS = None  # Don't set file permissions
    FILE_UPLOAD_DIRECTORY_PERMISSIONS = None  # Don't set directory permissions

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 404 handler
handler404 = 'django.views.defaults.page_not_found'
